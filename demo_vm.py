#!/usr/bin/env python3
"""
Non-interactive demo for VM
Shows all capabilities without user input
"""

import sys
import os
import math
import time
from pathlib import Path

def print_header(title):
    """Print formatted header"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_step(step, description):
    """Print step with delay"""
    print(f"\nüî∏ –®–∞–≥ {step}: {description}")
    print("-" * 50)
    time.sleep(1)

def demo_system_check():
    """Demo system compatibility check"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
    
    # Python version
    version = sys.version_info
    print(f"üêç Python: {version.major}.{version.minor}.{version.micro}")
    
    if version.major >= 3 and version.minor >= 6:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.6+")
    
    # Test basic libraries
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:")
    
    basic_libs = ['math', 'os', 'sys', 'pathlib', 'struct', 'random']
    for lib in basic_libs:
        try:
            __import__(lib)
            print(f"‚úÖ {lib}")
        except ImportError:
            print(f"‚ùå {lib}")
    
    # Test problematic libraries
    print(f"\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:")
    
    problematic_libs = {
        'numpy': '–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
        'sklearn': '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 
        'open3d': '3D –æ–±—Ä–∞–±–æ—Ç–∫–∞',
        'PyQt6': 'GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
    }
    
    for lib, desc in problematic_libs.items():
        try:
            __import__(lib)
            print(f"‚úÖ {lib} - {desc}")
        except ImportError:
            print(f"‚ùå {lib} - {desc} (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        except Exception as e:
            print(f"üí• {lib} - {desc} (–æ—à–∏–±–∫–∞: {str(e)[:50]}...)")

def demo_pcd_analysis():
    """Demo PCD file analysis"""
    print_header("–ê–ù–ê–õ–ò–ó PCD –§–ê–ô–õ–û–í")
    
    test_files = [
        ("data/points.pcd", "–ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"),
        ("data/processed_points.pcd", "–ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏)")
    ]
    
    for file_path, description in test_files:
        print(f"\nüìÅ {description}")
        print(f"   –§–∞–π–ª: {file_path}")
        
        if not Path(file_path).exists():
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        try:
            # File size
            size_bytes = Path(file_path).stat().st_size
            size_mb = size_bytes / (1024 * 1024)
            print(f"   üìè –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
            
            # Try to read header
            with open(file_path, 'rb') as f:
                header_data = {}
                
                for line_num in range(15):
                    line = f.readline()
                    if not line:
                        break
                    
                    try:
                        text_line = line.decode('utf-8').strip()
                        if not text_line or text_line.startswith('#'):
                            continue
                        
                        parts = text_line.split()
                        if len(parts) >= 2:
                            key = parts[0].upper()
                            
                            if key == 'POINTS':
                                header_data['points'] = int(parts[1])
                            elif key == 'FIELDS':
                                header_data['fields'] = parts[1:]
                            elif key == 'DATA':
                                header_data['format'] = parts[1]
                                break
                                
                    except UnicodeDecodeError:
                        # Hit binary data
                        break
                    except Exception:
                        continue
                
                # Print results
                if 'points' in header_data:
                    print(f"   üìä –¢–æ—á–µ–∫: {header_data['points']:,}")
                if 'fields' in header_data:
                    print(f"   üìã –ü–æ–ª—è: {', '.join(header_data['fields'])}")
                if 'format' in header_data:
                    print(f"   üíæ –§–æ—Ä–º–∞—Ç: {header_data['format']}")
                
                # Estimate processing time
                if 'points' in header_data:
                    points = header_data['points']
                    if points < 1000000:
                        time_est = "10-30 —Å–µ–∫—É–Ω–¥"
                    elif points < 5000000:
                        time_est = "1-3 –º–∏–Ω—É—Ç—ã"
                    else:
                        time_est = "5-15 –º–∏–Ω—É—Ç"
                    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~{time_est}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def demo_algorithm():
    """Demo detection algorithm"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø")
    
    print_step(1, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # Simple random without numpy
    import random
    random.seed(42)
    
    # Generate test points
    points = []
    
    # Ground points (low height)
    for _ in range(2000):
        x = random.uniform(0, 100)
        y = random.uniform(0, 100)
        z = random.uniform(0, 0.3)
        points.append((x, y, z, 'ground'))
    
    # Vehicle points
    vehicles = [
        (15, 25, 'car'),    # Car 1
        (35, 45, 'truck'),  # Truck
        (65, 75, 'car'),    # Car 2
    ]
    
    for center_x, center_y, vehicle_type in vehicles:
        if vehicle_type == 'car':
            width, length, height = 2.0, 4.0, 1.5
            point_count = 80
        else:  # truck
            width, length, height = 2.5, 8.0, 3.0
            point_count = 150
        
        for _ in range(point_count):
            x = random.uniform(center_x, center_x + length)
            y = random.uniform(center_y, center_y + width)
            z = random.uniform(0.2, height)
            points.append((x, y, z, vehicle_type))
    
    # Building points
    buildings = [
        (10, 10, 20, 20, 8),   # Building 1
        (50, 50, 70, 70, 12),  # Building 2
    ]
    
    for min_x, min_y, max_x, max_y, height in buildings:
        for _ in range(800):
            x = random.uniform(min_x, max_x)
            y = random.uniform(min_y, max_y)
            z = random.uniform(0, height)
            points.append((x, y, z, 'building'))
    
    total_points = len(points)
    ground_points = sum(1 for p in points if p[3] == 'ground')
    vehicle_points = sum(1 for p in points if p[3] in ['car', 'truck'])
    building_points = sum(1 for p in points if p[3] == 'building')
    
    print(f"   üåç –¢–æ—á–∫–∏ –∑–µ–º–ª–∏: {ground_points:,}")
    print(f"   üöó –¢–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {vehicle_points:,}")
    print(f"   üè¢ –¢–æ—á–∫–∏ –∑–¥–∞–Ω–∏–π: {building_points:,}")
    print(f"   üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {total_points:,}")
    
    print_step(2, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ")
    
    height_threshold = 0.5
    above_ground = [p for p in points if p[2] > height_threshold]
    
    print(f"   üìè –ü–æ—Ä–æ–≥ –≤—ã—Å–æ—Ç—ã: {height_threshold} –º")
    print(f"   ‚¨ÜÔ∏è –¢–æ—á–µ–∫ –≤—ã—à–µ –∑–µ–º–ª–∏: {len(above_ground):,}")
    print(f"   üìâ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {total_points - len(above_ground):,} —Ç–æ—á–µ–∫")
    
    print_step(3, "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π DBSCAN)")
    
    # Simple clustering
    clusters = []
    used_indices = set()
    eps = 3.0  # cluster radius
    min_samples = 20
    
    for i, point in enumerate(above_ground):
        if i in used_indices:
            continue
        
        # Start new cluster
        cluster = [i]
        used_indices.add(i)
        
        # Find nearby points
        for j, other_point in enumerate(above_ground):
            if j in used_indices:
                continue
            
            # Calculate distance
            dx = point[0] - other_point[0]
            dy = point[1] - other_point[1]
            dz = point[2] - other_point[2]
            distance = math.sqrt(dx*dx + dy*dy + dz*dz)
            
            if distance <= eps:
                cluster.append(j)
                used_indices.add(j)
        
        # Keep cluster if it has enough points
        if len(cluster) >= min_samples:
            clusters.append(cluster)
    
    noise_points = len(above_ground) - sum(len(cluster) for cluster in clusters)
    
    print(f"   üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: eps={eps}–º, min_samples={min_samples}")
    print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(clusters)}")
    print(f"   üî∏ –®—É–º–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {noise_points}")
    
    print_step(4, "–ê–Ω–∞–ª–∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    
    detected_vehicles = 0
    detected_buildings = 0
    
    vehicle_criteria = {
        'height_range': (0.5, 3.5),
        'width_range': (1.0, 4.0),
        'length_range': (2.0, 10.0),
        'min_points': 30
    }
    
    for i, cluster_indices in enumerate(clusters):
        cluster_points = [above_ground[idx] for idx in cluster_indices]
        
        if len(cluster_points) < 10:
            continue
        
        # Calculate bounding box
        xs = [p[0] for p in cluster_points]
        ys = [p[1] for p in cluster_points]
        zs = [p[2] for p in cluster_points]
        
        min_x, max_x = min(xs), max(xs)
        min_y, max_y = min(ys), max(ys)
        min_z, max_z = min(zs), max(zs)
        
        width = max_x - min_x
        length = max_y - min_y
        height = max_z - min_z
        
        # Sort dimensions
        dimensions = sorted([width, length, height])
        dim_height, dim_width, dim_length = dimensions
        
        # Check vehicle criteria
        is_vehicle = (
            vehicle_criteria['height_range'][0] <= dim_height <= vehicle_criteria['height_range'][1] and
            vehicle_criteria['width_range'][0] <= dim_width <= vehicle_criteria['width_range'][1] and
            vehicle_criteria['length_range'][0] <= dim_length <= vehicle_criteria['length_range'][1] and
            len(cluster_points) >= vehicle_criteria['min_points']
        )
        
        if is_vehicle:
            detected_vehicles += 1
            print(f"   üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç #{detected_vehicles}: {len(cluster_points)} —Ç–æ—á–µ–∫, {width:.1f}√ó{length:.1f}√ó{height:.1f}–º")
        else:
            detected_buildings += 1
            print(f"   üè¢ –ó–¥–∞–Ω–∏–µ #{detected_buildings}: {len(cluster_points)} —Ç–æ—á–µ–∫, {width:.1f}√ó{length:.1f}√ó{height:.1f}–º")
    
    print_step(5, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    # Count expected objects
    expected_vehicles = len([p for p in points if p[3] in ['car', 'truck']])
    expected_buildings = len([p for p in points if p[3] == 'building'])
    
    print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {detected_vehicles}")
    print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {detected_buildings}")
    print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –¢–°: 3 (2 –º–∞—à–∏–Ω—ã + 1 –≥—Ä—É–∑–æ–≤–∏–∫)")
    print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –∑–¥–∞–Ω–∏–π: 2")
    
    # Calculate accuracy
    vehicle_accuracy = min(100, (detected_vehicles / 3) * 100) if detected_vehicles > 0 else 0
    building_accuracy = min(100, (detected_buildings / 2) * 100) if detected_buildings > 0 else 0
    
    print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¢–°: {vehicle_accuracy:.0f}%")
    print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π: {building_accuracy:.0f}%")
    
    overall_accuracy = (vehicle_accuracy + building_accuracy) / 2
    if overall_accuracy >= 80:
        print(f"   üéâ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: –û—Ç–ª–∏—á–Ω–æ ({overall_accuracy:.0f}%)")
    elif overall_accuracy >= 60:
        print(f"   üëç –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: –•–æ—Ä–æ—à–æ ({overall_accuracy:.0f}%)")
    else:
        print(f"   ‚ö†Ô∏è –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ({overall_accuracy:.0f}%)")

def demo_project_capabilities():
    """Demo project capabilities"""
    print_header("–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–†–û–ï–ö–¢–ê")
    
    capabilities = [
        ("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ", [
            "RANSAC –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∑–µ–º–ª–∏",
            "DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã—à–µ –∑–µ–º–ª–∏", 
            "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞"
        ]),
        ("üé® 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", [
            "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Open3D",
            "–¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "–í—Ä–∞—â–µ–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
            "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π",
            "–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
        ]),
        ("‚úèÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", [
            "–í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, —Å—Ñ–µ—Ä–∞)",
            "–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ (–∫–ª–∞–≤–∏—à–∞ D)",
            "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π (C, V)",
            "–û—Ç–º–µ–Ω–∞ –∏ –ø–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è"
        ]),
        ("üíæ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏", [
            "–ó–∞–≥—Ä—É–∑–∫–∞ PCD —Ñ–∞–π–ª–æ–≤ (ASCII –∏ –±–∏–Ω–∞—Ä–Ω—ã–µ)",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ì–ë",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º PCD —Ñ–æ—Ä–º–∞—Ç–µ",
            "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è",
            "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CloudCompare"
        ]),
        ("üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", [
            "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏",
            "–ü—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ 1M —Ç–æ—á–µ–∫ –∑–∞ 10-30 —Å–µ–∫—É–Ω–¥"
        ])
    ]
    
    for category, features in capabilities:
        print(f"\n{category}")
        for feature in features:
            print(f"   ‚Ä¢ {feature}")

def demo_vm_limitations():
    """Show VM limitations and workarounds"""
    print_header("–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´")
    
    print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω–∞—Ö:")
    print("   ‚Ä¢ Open3D —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ CPU")
    print("   ‚Ä¢ PyQt6 –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å GPU")
    print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å OpenGL –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏")
    print()
    print("‚úÖ –û–±—Ö–æ–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)")
    print("   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ PCD —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
    print()
    print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –º–∞—à–∏–Ω—É —Å Ubuntu")
    print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã GPU")
    print("   ‚Ä¢ –û–±–µ—Å–ø–µ—á–∏—Ç—å 8+ –ì–ë RAM")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSD –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")

def main():
    """Main demo function"""
    print("üñ•Ô∏è LIDAR EDITOR - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–õ–Ø –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–´")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç")
    
    try:
        demo_system_check()
        time.sleep(2)
        
        demo_pcd_analysis()
        time.sleep(2)
        
        demo_algorithm()
        time.sleep(2)
        
        demo_project_capabilities()
        time.sleep(2)
        
        demo_vm_limitations()
        
        print_header("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("""
üéâ –ü—Ä–æ–µ–∫—Ç "–†–µ–¥–∞–∫—Ç–æ—Ä –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç" —É—Å–ø–µ—à–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:

‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
‚úÖ –í—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤  
‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é

üöÄ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –º–∞—à–∏–Ω–∞—Ö
   —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ Open3D –∏ PyQt6

üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/USAGE.md, docs/ARCHITECTURE.md
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python simple_test.py
        """)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
