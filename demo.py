#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –†–µ–¥–∞–∫—Ç–æ—Ä–∞ –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
"""

import sys
import os
import time
from pathlib import Path

# Add src directory to Python path
src_dir = Path(__file__).parent / "src"
sys.path.insert(0, str(src_dir))

def print_header(title):
    """Print formatted header"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_step(step, description):
    """Print formatted step"""
    print(f"\nüî∏ –®–∞–≥ {step}: {description}")
    print("-" * 50)

def demo_file_info():
    """Demonstrate file information extraction"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ PCD —Ñ–∞–π–ª–æ–≤")
    
    files_to_analyze = [
        ("data/points.pcd", "–ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"),
        ("data/processed_points.pcd", "–ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏)")
    ]
    
    for file_path, description in files_to_analyze:
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"\nüìÅ {description}")
        print(f"   –§–∞–π–ª: {file_path}")
        
        # Get file size
        file_size = Path(file_path).stat().st_size
        size_mb = file_size / (1024 * 1024)
        print(f"   –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
        
        # Try to read header
        try:
            with open(file_path, 'rb') as f:
                # Read first few lines as text
                header_lines = []
                for _ in range(15):
                    line = f.readline()
                    try:
                        decoded = line.decode('utf-8').strip()
                        header_lines.append(decoded)
                        if decoded.startswith('DATA'):
                            break
                    except UnicodeDecodeError:
                        break
                
                # Parse header info
                for line in header_lines:
                    if line.startswith('POINTS'):
                        points_count = int(line.split()[1])
                        print(f"   –¢–æ—á–µ–∫: {points_count:,}")
                    elif line.startswith('FIELDS'):
                        fields = ' '.join(line.split()[1:])
                        print(f"   –ü–æ–ª—è: {fields}")
                    elif line.startswith('DATA'):
                        data_format = line.split()[1]
                        print(f"   –§–æ—Ä–º–∞—Ç: {data_format}")
                        
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")

def demo_algorithm_logic():
    """Demonstrate algorithm logic with synthetic data"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
    
    import numpy as np
    from sklearn.cluster import DBSCAN
    
    print_step(1, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # Generate synthetic point cloud
    np.random.seed(42)
    
    # Ground plane
    ground_points = np.random.uniform([0, 0, 0], [50, 50, 0.2], (5000, 3))
    print(f"   üåç –¢–æ—á–∫–∏ –∑–µ–º–ª–∏: {len(ground_points):,}")
    
    # Buildings (static objects)
    building1 = np.random.uniform([10, 10, 0], [20, 20, 15], (2000, 3))
    building2 = np.random.uniform([30, 30, 0], [40, 40, 12], (1500, 3))
    static_points = np.vstack([building1, building2])
    print(f"   üè¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã: {len(static_points):,}")
    
    # Vehicles (dynamic objects)
    car1 = np.random.uniform([5, 25, 0.2], [9, 27, 1.8], (150, 3))  # Car
    truck1 = np.random.uniform([15, 35, 0.2], [23, 38, 3.2], (300, 3))  # Truck
    car2 = np.random.uniform([25, 15, 0.2], [29, 17, 1.6], (120, 3))  # Car
    dynamic_points = np.vstack([car1, truck1, car2])
    print(f"   üöó –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã: {len(dynamic_points):,}")
    
    # Combine all points
    all_points = np.vstack([ground_points, static_points, dynamic_points])
    total_points = len(all_points)
    print(f"   üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {total_points:,}")
    
    print_step(2, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ")
    
    # Filter by height (above ground)
    height_threshold = 0.5
    above_ground = all_points[all_points[:, 2] > height_threshold]
    print(f"   üìè –ü–æ—Ä–æ–≥ –≤—ã—Å–æ—Ç—ã: {height_threshold} –º")
    print(f"   ‚¨ÜÔ∏è –¢–æ—á–µ–∫ –≤—ã—à–µ –∑–µ–º–ª–∏: {len(above_ground):,}")
    
    print_step(3, "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (DBSCAN)")
    
    # Apply DBSCAN clustering
    eps = 2.0
    min_samples = 10
    clustering = DBSCAN(eps=eps, min_samples=min_samples).fit(above_ground)
    
    labels = clustering.labels_
    unique_labels = np.unique(labels)
    n_clusters = len(unique_labels) - (1 if -1 in labels else 0)
    n_noise = list(labels).count(-1)
    
    print(f"   üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: eps={eps}, min_samples={min_samples}")
    print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {n_clusters}")
    print(f"   üî∏ –®—É–º–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {n_noise}")
    
    print_step(4, "–ê–Ω–∞–ª–∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    
    vehicle_criteria = {
        'height_range': (0.5, 3.5),
        'width_range': (1.0, 4.0),
        'length_range': (2.0, 10.0),
        'min_points': 50
    }
    
    detected_vehicles = 0
    detected_buildings = 0
    
    for label in unique_labels:
        if label == -1:  # Skip noise
            continue
            
        cluster_mask = labels == label
        cluster_points = above_ground[cluster_mask]
        
        if len(cluster_points) < 10:
            continue
            
        # Calculate bounding box
        min_bound = cluster_points.min(axis=0)
        max_bound = cluster_points.max(axis=0)
        dimensions = max_bound - min_bound
        
        # Sort dimensions to get height, width, length
        sorted_dims = sorted(dimensions)
        height, width, length = sorted_dims
        
        # Check vehicle criteria
        is_vehicle = (
            vehicle_criteria['height_range'][0] <= height <= vehicle_criteria['height_range'][1] and
            vehicle_criteria['width_range'][0] <= width <= vehicle_criteria['width_range'][1] and
            vehicle_criteria['length_range'][0] <= length <= vehicle_criteria['length_range'][1] and
            len(cluster_points) >= vehicle_criteria['min_points']
        )
        
        if is_vehicle:
            detected_vehicles += 1
            print(f"   üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {len(cluster_points)} —Ç–æ—á–µ–∫, —Ä–∞–∑–º–µ—Ä—ã: {dimensions[0]:.1f}√ó{dimensions[1]:.1f}√ó{dimensions[2]:.1f}")
        else:
            detected_buildings += 1
            print(f"   üè¢ –ó–¥–∞–Ω–∏–µ: {len(cluster_points)} —Ç–æ—á–µ–∫, —Ä–∞–∑–º–µ—Ä—ã: {dimensions[0]:.1f}√ó{dimensions[1]:.1f}√ó{dimensions[2]:.1f}")
    
    print_step(5, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {detected_vehicles}")
    print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {detected_buildings}")
    print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¢–°: {detected_vehicles/3*100:.0f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")

def demo_performance_metrics():
    """Demonstrate performance metrics"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # Simulated performance data
    test_cases = [
        {"points": 1000000, "time_min": 10, "time_max": 30},
        {"points": 5000000, "time_min": 60, "time_max": 180},
        {"points": 10000000, "time_min": 300, "time_max": 900},
    ]
    
    print("üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"{'–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞':<15} {'–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏':<20} {'–°–∫–æ—Ä–æ—Å—Ç—å':<20}")
    print("-" * 60)
    
    for case in test_cases:
        points = case["points"]
        time_min = case["time_min"]
        time_max = case["time_max"]
        
        speed_min = points // time_max
        speed_max = points // time_min
        
        points_str = f"{points//1000000}M —Ç–æ—á–µ–∫" if points >= 1000000 else f"{points//1000}K —Ç–æ—á–µ–∫"
        time_str = f"{time_min//60}-{time_max//60} –º–∏–Ω" if time_min >= 60 else f"{time_min}-{time_max} —Å–µ–∫"
        speed_str = f"{speed_min//1000}-{speed_max//1000}K —Ç/—Å"
        
        print(f"{points_str:<15} {time_str:<20} {speed_str:<20}")

def demo_features():
    """Demonstrate key features"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    
    features = [
        ("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ", [
            "RANSAC –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∑–µ–º–ª–∏",
            "DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤",
            "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¢–°"
        ]),
        ("üé® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", [
            "3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Open3D",
            "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π",
            "–û–ø–µ—Ä–∞—Ü–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—Å—Ç–∞–≤–∫–∞",
            "–¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        ]),
        ("üíæ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏", [
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PCD —Ñ–æ—Ä–º–∞—Ç–∞ (ASCII/–±–∏–Ω–∞—Ä–Ω—ã–π)",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ì–ë",
            "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º PCD —Ñ–æ—Ä–º–∞—Ç–µ"
        ]),
        ("üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", [
            "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
            "–ü—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
        ])
    ]
    
    for feature_name, feature_list in features:
        print(f"\n{feature_name}")
        for item in feature_list:
            print(f"   ‚Ä¢ {item}")

def main():
    """Main demo function"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–î–ê–ö–¢–û–†–ê –õ–ò–î–ê–†–ù–´–• –ö–ê–†–¢")
    print("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç")
    
    try:
        demo_file_info()
        time.sleep(1)
        
        demo_algorithm_logic()
        time.sleep(1)
        
        demo_performance_metrics()
        time.sleep(1)
        
        demo_features()
        
        print_header("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("""
üéâ –†–µ–¥–∞–∫—Ç–æ—Ä –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:

‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
‚úÖ –í—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚úÖ –£–¥–æ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö

üöÄ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç!

–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: python run_app.py
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python simple_test.py
        """)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()
