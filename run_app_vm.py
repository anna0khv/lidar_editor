#!/usr/bin/env python3
"""
VM-compatible version of LIDAR Editor
Runs without Open3D for virtual machines
"""

import sys
import os
from pathlib import Path

# Add src directory to Python path
src_dir = Path(__file__).parent / "src"
sys.path.insert(0, str(src_dir))

def check_vm_compatibility():
    """Check if we're running on a VM and what's available"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π...")
    
    # Check available libraries
    available_libs = {}
    
    try:
        import numpy
        available_libs['numpy'] = numpy.__version__
        print(f"‚úÖ NumPy {numpy.__version__}")
    except ImportError:
        print("‚ùå NumPy –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import sklearn
        available_libs['sklearn'] = sklearn.__version__
        print(f"‚úÖ Scikit-learn {sklearn.__version__}")
    except ImportError:
        print("‚ùå Scikit-learn –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import matplotlib
        available_libs['matplotlib'] = matplotlib.__version__
        print(f"‚úÖ Matplotlib {matplotlib.__version__}")
    except ImportError:
        print("‚ùå Matplotlib –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # Check Open3D (likely to fail on VM)
    try:
        import open3d
        available_libs['open3d'] = open3d.__version__
        print(f"‚úÖ Open3D {open3d.__version__}")
    except ImportError:
        print("‚ö†Ô∏è Open3D –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è VM)")
    except Exception as e:
        print(f"‚ö†Ô∏è Open3D –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # Check PyQt6 (may fail on VM without display)
    try:
        from PyQt6.QtWidgets import QApplication
        print("‚úÖ PyQt6 –¥–æ—Å—Ç—É–ø–µ–Ω")
        available_libs['pyqt6'] = True
    except ImportError:
        print("‚ö†Ô∏è PyQt6 –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è PyQt6 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    return available_libs

def run_vm_demo():
    """Run VM-compatible demo"""
    print("\nüéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã")
    print("=" * 50)
    
    # Import our basic modules
    try:
        import numpy as np
        from sklearn.cluster import DBSCAN
        
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...")
        
        # Generate synthetic data
        np.random.seed(42)
        
        # Create test point cloud
        ground = np.random.uniform([0, 0, 0], [50, 50, 0.2], (1000, 3))
        cars = np.random.uniform([10, 10, 0.5], [15, 12, 2.0], (100, 3))
        buildings = np.random.uniform([20, 20, 0], [30, 30, 10], (500, 3))
        
        all_points = np.vstack([ground, cars, buildings])
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_points)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
        
        # Filter by height
        above_ground = all_points[all_points[:, 2] > 0.5]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(above_ground)} —Ç–æ—á–µ–∫ –≤—ã—à–µ –∑–µ–º–ª–∏")
        
        # Clustering
        clustering = DBSCAN(eps=2.0, min_samples=10).fit(above_ground)
        labels = clustering.labels_
        n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        
        # Analyze clusters
        vehicle_count = 0
        building_count = 0
        
        for label in set(labels):
            if label == -1:
                continue
                
            cluster_points = above_ground[labels == label]
            if len(cluster_points) < 20:
                continue
                
            # Calculate dimensions
            min_bound = cluster_points.min(axis=0)
            max_bound = cluster_points.max(axis=0)
            dims = max_bound - min_bound
            
            # Simple classification
            if 0.5 <= dims[2] <= 3.0 and 1.0 <= dims[0] <= 8.0 and 1.0 <= dims[1] <= 4.0:
                vehicle_count += 1
                print(f"üöó –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {dims[0]:.1f}√ó{dims[1]:.1f}√ó{dims[2]:.1f}–º")
            else:
                building_count += 1
                print(f"üè¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–µ: {dims[0]:.1f}√ó{dims[1]:.1f}√ó{dims[2]:.1f}–º")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {vehicle_count}")
        print(f"   –ó–¥–∞–Ω–∏–π: {building_count}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {'‚úÖ –û—Ç–ª–∏—á–Ω–æ' if vehicle_count > 0 else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def run_text_interface():
    """Run text-based interface for VM"""
    print("\nüì± –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        print("2. üìä –ê–Ω–∞–ª–∏–∑ PCD —Ñ–∞–π–ª–æ–≤")
        print("3. ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("4. üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
        print("0. üö™ –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-4): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                run_vm_demo()
            elif choice == "2":
                analyze_pcd_files()
            elif choice == "3":
                check_vm_compatibility()
            elif choice == "4":
                show_documentation()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def analyze_pcd_files():
    """Analyze available PCD files"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ PCD —Ñ–∞–π–ª–æ–≤")
    print("-" * 30)
    
    pcd_files = [
        "data/points.pcd",
        "data/processed_points.pcd"
    ]
    
    for file_path in pcd_files:
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        try:
            # Get file size
            size_mb = Path(file_path).stat().st_size / (1024 * 1024)
            print(f"\nüìÅ {file_path}")
            print(f"   –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
            
            # Try to read header
            with open(file_path, 'rb') as f:
                header_lines = []
                for _ in range(15):
                    line = f.readline()
                    try:
                        decoded = line.decode('utf-8').strip()
                        header_lines.append(decoded)
                        if decoded.startswith('DATA'):
                            break
                    except UnicodeDecodeError:
                        break
                
                # Parse info
                for line in header_lines:
                    if line.startswith('POINTS'):
                        points = int(line.split()[1])
                        print(f"   –¢–æ—á–µ–∫: {points:,}")
                    elif line.startswith('FIELDS'):
                        fields = ' '.join(line.split()[1:])
                        print(f"   –ü–æ–ª—è: {fields}")
                    elif line.startswith('DATA'):
                        fmt = line.split()[1]
                        print(f"   –§–æ—Ä–º–∞—Ç: {fmt}")
                        
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

def show_documentation():
    """Show available documentation"""
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    print("-" * 30)
    
    docs = [
        ("README.md", "–û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞"),
        ("docs/USAGE.md", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ("docs/ARCHITECTURE.md", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"),
        ("PROJECT_SUMMARY.md", "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–µ")
    ]
    
    for doc_file, description in docs:
        if Path(doc_file).exists():
            print(f"‚úÖ {doc_file} - {description}")
        else:
            print(f"‚ùå {doc_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüí° –î–ª—è —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   cat README.md")
    print(f"   less docs/USAGE.md")

def main():
    """Main function for VM-compatible version"""
    print("üñ•Ô∏è LIDAR Editor - –í–µ—Ä—Å–∏—è –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã")
    print("=" * 60)
    
    # Check compatibility first
    available = check_vm_compatibility()
    
    if not available:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install numpy scikit-learn matplotlib")
        return
    
    print(f"\n‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    print(f"‚ö†Ô∏è GUI –∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ VM")
    print(f"üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
    
    # Run text interface
    run_text_interface()

if __name__ == "__main__":
    main()
