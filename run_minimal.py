#!/usr/bin/env python3
"""
Minimal version for problematic VMs
Uses only standard Python libraries
"""

import sys
import os
import struct
import math
from pathlib import Path

def print_header(title):
    """Print formatted header"""
    print("\n" + "="*50)
    print(f"  {title}")
    print("="*50)

def check_python_version():
    """Check Python version"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 6):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.6+")
        return False
    
    print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True

def test_basic_libraries():
    """Test basic Python libraries"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:")
    
    libraries = {
        'math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        'struct': '–†–∞–±–æ—Ç–∞ —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', 
        'pathlib': '–†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤',
        'os': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
    }
    
    success_count = 0
    for lib_name, description in libraries.items():
        try:
            __import__(lib_name)
            print(f"‚úÖ {lib_name} - {description}")
            success_count += 1
        except ImportError:
            print(f"‚ùå {lib_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return success_count == len(libraries)

def analyze_pcd_header(file_path):
    """Analyze PCD file header without external libraries"""
    print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    
    if not Path(file_path).exists():
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        file_size = Path(file_path).stat().st_size
        print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} –ú–ë")
        
        with open(file_path, 'rb') as f:
            # Read header lines
            header_info = {}
            line_count = 0
            
            while line_count < 20:  # Read max 20 header lines
                try:
                    line = f.readline()
                    if not line:
                        break
                        
                    # Try to decode as text
                    try:
                        text_line = line.decode('utf-8').strip()
                    except UnicodeDecodeError:
                        # Hit binary data
                        break
                    
                    if not text_line or text_line.startswith('#'):
                        continue
                    
                    # Parse header fields
                    parts = text_line.split()
                    if len(parts) >= 2:
                        key = parts[0].upper()
                        
                        if key == 'VERSION':
                            header_info['version'] = parts[1]
                        elif key == 'FIELDS':
                            header_info['fields'] = parts[1:]
                        elif key == 'SIZE':
                            header_info['sizes'] = [int(x) for x in parts[1:]]
                        elif key == 'TYPE':
                            header_info['types'] = parts[1:]
                        elif key == 'COUNT':
                            header_info['counts'] = [int(x) for x in parts[1:]]
                        elif key == 'WIDTH':
                            header_info['width'] = int(parts[1])
                        elif key == 'HEIGHT':
                            header_info['height'] = int(parts[1])
                        elif key == 'POINTS':
                            header_info['points'] = int(parts[1])
                        elif key == 'DATA':
                            header_info['data_format'] = parts[1]
                            break
                    
                    line_count += 1
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {line_count}: {e}")
                    break
            
            # Print parsed info
            for key, value in header_info.items():
                if key == 'points':
                    print(f"   üìä –¢–æ—á–µ–∫: {value:,}")
                elif key == 'fields':
                    print(f"   üìã –ü–æ–ª—è: {', '.join(value)}")
                elif key == 'data_format':
                    print(f"   üíæ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {value}")
                elif key == 'version':
                    print(f"   üìå –í–µ—Ä—Å–∏—è PCD: {value}")
            
            return header_info
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return None

def simulate_detection_algorithm():
    """Simulate detection algorithm with basic Python"""
    print_header("–°–∏–º—É–ª—è—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
    
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # Simple random number generator (no numpy)
    import random
    random.seed(42)
    
    # Generate synthetic points
    points = []
    
    # Ground points
    for _ in range(1000):
        x = random.uniform(0, 50)
        y = random.uniform(0, 50) 
        z = random.uniform(0, 0.2)
        points.append((x, y, z, 'ground'))
    
    # Car points
    for _ in range(100):
        x = random.uniform(10, 14)
        y = random.uniform(10, 12)
        z = random.uniform(0.5, 2.0)
        points.append((x, y, z, 'car'))
    
    # Building points
    for _ in range(500):
        x = random.uniform(20, 30)
        y = random.uniform(20, 30)
        z = random.uniform(0, 10)
        points.append((x, y, z, 'building'))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(points)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
    
    # Simple height filtering
    above_ground = [p for p in points if p[2] > 0.5]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(above_ground)} —Ç–æ—á–µ–∫ –≤—ã—à–µ –∑–µ–º–ª–∏")
    
    # Simple clustering by distance
    clusters = []
    used_points = set()
    
    for i, point in enumerate(above_ground):
        if i in used_points:
            continue
            
        cluster = [i]
        used_points.add(i)
        
        # Find nearby points
        for j, other_point in enumerate(above_ground):
            if j in used_points:
                continue
                
            # Calculate distance
            dx = point[0] - other_point[0]
            dy = point[1] - other_point[1]
            dz = point[2] - other_point[2]
            distance = math.sqrt(dx*dx + dy*dy + dz*dz)
            
            if distance < 2.0:  # eps = 2.0
                cluster.append(j)
                used_points.add(j)
        
        if len(cluster) >= 10:  # min_samples = 10
            clusters.append(cluster)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    
    # Analyze clusters
    vehicles = 0
    buildings = 0
    
    for cluster_indices in clusters:
        cluster_points = [above_ground[i] for i in cluster_indices]
        
        # Calculate bounding box
        xs = [p[0] for p in cluster_points]
        ys = [p[1] for p in cluster_points]
        zs = [p[2] for p in cluster_points]
        
        width = max(xs) - min(xs)
        length = max(ys) - min(ys)
        height = max(zs) - min(zs)
        
        # Simple classification
        if (0.5 <= height <= 3.0 and 
            1.0 <= width <= 8.0 and 
            1.0 <= length <= 4.0 and
            len(cluster_points) >= 20):
            vehicles += 1
            print(f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {len(cluster_points)} —Ç–æ—á–µ–∫, {width:.1f}√ó{length:.1f}√ó{height:.1f}–º")
        else:
            buildings += 1
            print(f"üè¢ –ó–¥–∞–Ω–∏–µ: {len(cluster_points)} —Ç–æ—á–µ–∫, {width:.1f}√ó{length:.1f}√ó{height:.1f}–º")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    print(f"   üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {vehicles}")
    print(f"   üè¢ –ó–¥–∞–Ω–∏–π: {buildings}")
    
    # Check accuracy
    expected_cars = sum(1 for p in points if p[3] == 'car')
    expected_buildings = sum(1 for p in points if p[3] == 'building')
    
    print(f"\nüéØ –û–∂–∏–¥–∞–ª–æ—Å—å:")
    print(f"   üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {expected_cars // 100} (–ø—Ä–∏–º–µ—Ä–Ω–æ)")
    print(f"   üè¢ –ó–¥–∞–Ω–∏–π: {expected_buildings // 500} (–ø—Ä–∏–º–µ—Ä–Ω–æ)")
    
    accuracy = "‚úÖ –•–æ—Ä–æ—à–æ" if vehicles > 0 else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    print(f"   üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}")

def show_project_info():
    """Show project information"""
    print_header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
    
    print("üéØ –†–µ–¥–∞–∫—Ç–æ—Ä –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç")
    print("   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
    print("   –∏–∑ –ª–∏–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PCD")
    print()
    print("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ (RANSAC + DBSCAN)")
    print("   ‚Ä¢ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (Open3D)")
    print("   ‚Ä¢ –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   ‚Ä¢ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (PyQt6)")
    print()
    print("üìä –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:")
    print("   1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∑–µ–º–ª–∏")
    print("   2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ")
    print("   3. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
    print("   4. –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    print("   5. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    print()
    print("üé® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ì–ë")
    print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ 3D —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

def main_menu():
    """Main menu for minimal version"""
    while True:
        print_header("LIDAR Editor - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print("–í–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
        print()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
        print("2. üìä –ê–Ω–∞–ª–∏–∑ PCD —Ñ–∞–π–ª–æ–≤")
        print("3. üß™ –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        print("4. ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
        print("5. üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
        print("0. üö™ –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-5): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                check_python_version()
                test_basic_libraries()
            elif choice == "2":
                files = ["data/points.pcd", "data/processed_points.pcd"]
                for file_path in files:
                    analyze_pcd_header(file_path)
            elif choice == "3":
                simulate_detection_algorithm()
            elif choice == "4":
                show_project_info()
            elif choice == "5":
                show_documentation()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_documentation():
    """Show available documentation"""
    print_header("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    docs = [
        "README.md",
        "docs/USAGE.md", 
        "docs/ARCHITECTURE.md",
        "PROJECT_SUMMARY.md"
    ]
    
    print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
    for doc in docs:
        if Path(doc).exists():
            print(f"‚úÖ {doc}")
        else:
            print(f"‚ùå {doc} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print(f"\nüí° –î–ª—è —á—Ç–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   cat README.md")
    print(f"   less docs/USAGE.md")

if __name__ == "__main__":
    try:
        main_menu()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–æ–π –∏–ª–∏ Python")
        sys.exit(1)
